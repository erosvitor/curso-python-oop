
====================================================================================================
CURSO ORIENTAÇÃO A OBJETOS PYTHON - CLASSES ATRIBUTOS E MÉTODOS
====================================================================================================

Descrição
----------------------------------------------------------------------------------------------------
Na programação orientada a objetos uma classe é a abstração de um determinado objeto para o meio
computacional. A classe pode representar tanto objetos concretos como objetos abstratos.

Exemplos de objetos concretos:

- Carro
- Aluno
- Computador
- Nota fiscal
- Livro
- Boletim escolar

Exemplos de objetos abstratos:

- Conta corrente
- Curso

Uma classe também pode abstrair um conceito que só exista no domínio de negócio para o qual o 
programa de computador esta sendo criado. Por exemplo, uma classe que representar o acesso a um 
banco de dados.

Uma classe possui uma estrutura composta por atributos e métodos. Os atributos são utilizados para
armazenar dados sobre o objeto. Já os métodos são utilizados para representar as ações que o 
objeto pode executar.

Por exemplo, uma classe que abstraia o objeto 'carro' pode ter como atributos a marca, modelo, ano
e cor do veículos. Como métodos, pode ter ligar, desligar, acelerar e freiar.

Importante observar que os atributos sempre são substantivos e os métodos são verbos. 

 
Definindo uma classe
----------------------------------------------------------------------------------------------------

class Carro:
  pass


Adicionando atributos
----------------------------------------------------------------------------------------------------

class Carro:

  def __init__(self):
    self.marca = ""
    self.modelo = ""
    self.cor = ""


Utilizando os atributos
----------------------------------------------------------------------------------------------------

class Carro:

  def __init__(self):
    self.marca = ""
    self.modelo = ""
    self.cor = ""

carro1 = Carro()
carro1.marca = "Ford"
carro1.modelo = "Fusion"
carro1.cor = "Preta"

print(carro1.marca)


Efetuando calculos
----------------------------------------------------------------------------------------------------

class Carro:

  def __init__(self):
    self.marca = ""
    self.modelo = ""
    self.cor = ""
    self.capacidadeTanque = 0
    self.kmPorLitro = 0

carro1 = Carro()
carro1.marca = "Ford"
carro1.modelo = "Fusion"
carro1.cor = "Preta"
carro1.capacidadeTanque = 55
carro1.kmPorLitro = 8

autonomia = carro1.capacidadeTanque * carro1.kmPorLitro
print(f"Autonomia do carro {carro1.modelo} é de {autonomia}")


Métodos
----------------------------------------------------------------------------------------------------

class Carro:

  def __init__(self):
    self.marca = ""
    self.modelo = ""
    self.cor = ""
    self.capacidadeTanque = 0
    self.kmPorLitro = 0

  def calcularAutonomia(self):
    return self.capacidadeTanque * self.kmPorLitro

carro1 = Carro()
carro1.marca = "Ford"
carro1.modelo = "Fusion"
carro1.cor = "Preta"
carro1.capacidadeTanque = 55
carro1.kmPorLitro = 8

autonomia = carro1.calcularAutonomia()
print(f"Autonomia do carro {carro1.modelo} é de {autonomia}")


Métodos e Parâmetros
----------------------------------------------------------------------------------------------------

class Carro:

  def __init__(self):
    self.marca = ""
    self.modelo = ""
    self.cor = ""
    self.capacidadeTanque = 0
    self.kmPorLitro = 0

  def calcularAutonomia(self):
    return self.capacidadeTanque * self.kmPorLitro

  def calcularCombustivel(self, km):
    return km / self.kmPorLitro

carro1 = Carro()
carro1.marca = "Ford"
carro1.modelo = "Fusion"
carro1.cor = "Preta"
carro1.capacidadeTanque = 55
carro1.kmPorLitro = 8

autonomia = carro1.calcularAutonomia()
print(f"Autonomia do carro {carro1.modelo} é de {autonomia}")

quilometragem = 400
qtdeCombustivel = carro1.calcularCombustivel(quilometragem)
print(f"Para uma viagem de {quilometragem}km, são necessários {qtdeCombustivel} litros de combustível")


